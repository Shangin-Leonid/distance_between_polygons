#--------------------------------------------------------------------------------------------------
# Directories and their structure
#--------------------------------------------------------------------------------------------------

C_DIR := ./src
OBJ_DIR := ./obj_files
D_DIR := ./d_files
#H_DIR := ./header

#--------------------------------------------------------------------------------------------------
# File names
#--------------------------------------------------------------------------------------------------

C_FILES := $(wildcard $(C_DIR)/*.c)
OBJ_FILES := $(addprefix $(OBJ_DIR)/, $(patsubst %.c, %.o, $(notdir $(C_FILES))))
D_FILES := $(addprefix $(D_DIR)/, $(patsubst %.c, %.d, $(notdir $(C_FILES))))
#H_FILES := $(addprefix $(H_DIR)/, $(patsubst %.c, %.h, $(notdir $(C_FILES))))

SLIB_NAME := Geom
SLIB_FILE_NAME := lib$(SLIB_NAME)
SLIB_FILE = $(SLIB_DIR)/$(SLIB_FILE_NAME).$(SLIB_EXT)

MAKE_REFERENCE_FILE = make_reference.txt

#--------------------------------------------------------------------------------------------------
# Extensions
#--------------------------------------------------------------------------------------------------

ifeq ($(OS),Windows_NT)
	EXE_EXT := exe
	SLIB_EXT := lib
#	DLIB_EXT := dll
else
	EXE_EXT := out
	SLIB_EXT := a
#	DLIB_EXT := so
endif

#--------------------------------------------------------------------------------------------------
# Compiler
#--------------------------------------------------------------------------------------------------

COMPILER := gcc

#--------------------------------------------------------------------------------------------------
# Flags for C compilation
#--------------------------------------------------------------------------------------------------

$(OBJ_DIR)/%.o : CUR_C = $(C_DIR)/$*.c
$(OBJ_DIR)/%.o : CFLAGS = -c -g -Wall -Wextra -pedantic -o $@

$(D_DIR)/%.d : CUR_C = $(C_DIR)/$*.c

INCLUDING_LIBS_FLAG = -L$(SLIB_DIR)/ -l$(SLIB_NAME) -lm

#--------------------------------------------------------------------------------------------------
# RULES
#--------------------------------------------------------------------------------------------------

.PHONY : help print-*
.DEFAULT_GOAL := help

# Вывод файла-подсказки с описанием функционала данного 'makefile'
help:
	@echo "\n"
	@cat $(MAKE_REFERENCE_FILE)
	@echo "\n\n"

# Напечатать значение переменной (для отладки)
print-%: ; @echo $* = $($*)

# Создание директории для объектных файлов
$(OBJ_DIR):
	mkdir -p $@

# Создание директории для файлов зависимостей
$(D_DIR):
	mkdir -p $@

# Создание и обновление объектных файлов
$(OBJ_DIR)/%.o: $(D_DIR)/%.d | $(OBJ_DIR)
	$(COMPILER) $(CFLAGS) $(CUR_C)

# Создание и обновление файлов зависимостей
$(D_DIR)/%.d: | $(D_DIR)
	$(COMPILER) $(CFLAGS) $(CUR_C) > ./$@



#--------------------------------------------------------------------------------------------------
# COMMENTS
#--------------------------------------------------------------------------------------------------
#
# All makefiles have been written for Linux. Sorry, if you have another OS :-(
# I wish you could understand my make-code and then rewrite some parts.
#